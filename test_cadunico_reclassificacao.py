#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Suite de testes para valida√ß√£o da regra de reclassifica√ß√£o Cad√önico ‚Üí Endere√ßo

Regra testada:
- "Apenas Cad√önico" ‚Üí "Cad√önico + Endere√ßo em m√∫ltiplas bases" (quando n√£o h√° filho)
- "Apenas Cad√önico" ‚Üí "Filho + Cad√önico" (quando defesa admite filho via Args 2 ou 12)

Base jur√≠dica: Declara√ß√£o de companheiro(a) no Cad√önico necessariamente implica endere√ßo comum
(requisito sist√™mico do programa).

Vers√£o: 2.1.3
Data: 2025-10-21
"""

import sys
import io
import re

# Configura√ß√£o para UTF-8 no Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def simular_reclassificacao_cadunico(achado_original, argumentos, texto_defesa=""):
    """
    Simula a regra de reclassifica√ß√£o Cad√önico implementada no app.py (linhas 1298-1310)

    Args:
        achado_original: String com o achado classificado pelo GPT
        argumentos: Lista de strings com os argumentos identificados
        texto_defesa: String com o texto da defesa (para validar men√ß√£o literal a filho)

    Returns:
        Tupla (achado_reclassificado, tem_filho_defesa)
    """
    achado = achado_original
    tem_filho_defesa = False

    if achado.strip().lower() in ["apenas cad√∫nico", "apenas cadunico"]:
        # Simplifica√ß√£o: Cad√önico SEMPRE implica coabita√ß√£o (endere√ßo)
        achado = "Cad√önico + Endere√ßo em m√∫ltiplas bases"

        # Detectar men√ß√£o a filho para sinalizar na decis√£o
        texto_limpo = texto_defesa.lower()
        menciona_filho_literal = bool(re.search(r'\bfilh[oa]s?\b', texto_limpo))

        # Flag s√≥ ativada se houver men√ß√£o LITERAL (prote√ß√£o contra falso positivo do GPT)
        if menciona_filho_literal:
            tem_filho_defesa = True

    return achado, tem_filho_defesa


def teste_cadunico_sem_filho():
    """
    Testa reclassifica√ß√£o: Apenas Cad√önico ‚Üí Cad√önico + Endere√ßo em m√∫ltiplas bases
    (quando n√£o h√° argumentos de filho)
    """
    achado = "Apenas Cad√önico"
    argumentos = ["1"]  # Arg 1 = Negativa de uni√£o est√°vel

    resultado, tem_filho = simular_reclassificacao_cadunico(achado, argumentos)

    assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
        f"‚ùå Esperado 'Cad√önico + Endere√ßo em m√∫ltiplas bases', obtido '{resultado}'"
    assert tem_filho == False, \
        f"‚ùå Flag tem_filho deveria ser False, obtido {tem_filho}"

    print("‚úÖ PASSOU: Cad√önico sem filho ‚Üí Cad√önico + Endere√ßo em m√∫ltiplas bases")
    return True


def teste_cadunico_com_filho_arg2():
    """
    Testa reclassifica√ß√£o: Apenas Cad√önico ‚Üí Cad√önico + Endere√ßo + flag filho=True
    (quando defesa admite filho via Argumento 2 E menciona "filho" no texto)
    """
    achado = "Apenas Cad√önico"
    argumentos = ["2", "1"]  # Arg 2 = Defesa admite filho em comum
    texto_defesa = "A exist√™ncia de filho em comum n√£o caracteriza uni√£o est√°vel"

    resultado, tem_filho = simular_reclassificacao_cadunico(achado, argumentos, texto_defesa)

    assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
        f"‚ùå Esperado 'Cad√önico + Endere√ßo em m√∫ltiplas bases', obtido '{resultado}'"
    assert tem_filho == True, \
        f"‚ùå Flag tem_filho deveria ser True, obtido {tem_filho}"

    print("‚úÖ PASSOU: Cad√önico + Arg 2 + men√ß√£o a 'filho' ‚Üí Cad√önico + Endere√ßo (flag filho=True)")
    return True


def teste_cadunico_com_filho_arg12():
    """
    Testa reclassifica√ß√£o: Apenas Cad√önico ‚Üí Cad√önico + Endere√ßo + flag filho=True
    (quando defesa admite filho via Argumento 12 E menciona "filho" no texto)
    """
    achado = "Apenas Cad√önico"
    argumentos = ["12"]  # Arg 12 = Filho em comum sem guarda compartilhada
    texto_defesa = "O filho n√£o mora comigo desde que nasceu"

    resultado, tem_filho = simular_reclassificacao_cadunico(achado, argumentos, texto_defesa)

    assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
        f"‚ùå Esperado 'Cad√önico + Endere√ßo em m√∫ltiplas bases', obtido '{resultado}'"
    assert tem_filho == True, \
        f"‚ùå Flag tem_filho deveria ser True, obtido {tem_filho}"

    print("‚úÖ PASSOU: Cad√önico + Arg 12 + men√ß√£o a 'filho' ‚Üí Cad√önico + Endere√ßo (flag filho=True)")
    return True


def teste_cadunico_com_ambos_args_filho():
    """
    Testa reclassifica√ß√£o quando defesa apresenta ambos Args 2 e 12
    """
    achado = "Apenas Cad√önico"
    argumentos = ["2", "12", "1"]
    texto_defesa = "Minha filha mora com o pai desde pequena"

    resultado, tem_filho = simular_reclassificacao_cadunico(achado, argumentos, texto_defesa)

    assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
        f"‚ùå Esperado 'Cad√önico + Endere√ßo em m√∫ltiplas bases', obtido '{resultado}'"
    assert tem_filho == True, \
        f"‚ùå Flag tem_filho deveria ser True, obtido {tem_filho}"

    print("‚úÖ PASSOU: Cad√önico + Args 2 e 12 + men√ß√£o a 'filha' ‚Üí Cad√önico + Endere√ßo (flag filho=True)")
    return True


def teste_nao_reclassifica_outros_achados():
    """
    Testa que a regra N√ÉO reclassifica outros achados que n√£o sejam "Apenas Cad√önico"
    """
    casos = [
        ("Apenas 1 filho", ["1"]),
        ("Filho + endere√ßo", ["1"]),
        ("Mais de 1 filho", ["1"]),
        ("Filho + Cad√önico", ["1"]),
        ("Cad√önico + Endere√ßo em m√∫ltiplas bases", ["1"]),
    ]

    for achado_original, args in casos:
        resultado, tem_filho = simular_reclassificacao_cadunico(achado_original, args)
        assert resultado == achado_original, \
            f"‚ùå Achado '{achado_original}' foi indevidamente alterado para '{resultado}'"

    print("‚úÖ PASSOU: N√£o reclassifica achados que n√£o sejam 'Apenas Cad√önico'")
    return True


def teste_case_insensitive():
    """
    Testa que a regra funciona independentemente de mai√∫sculas/min√∫sculas
    """
    variantes = [
        "Apenas Cad√önico",
        "apenas cad√∫nico",
        "APENAS CAD√öNICO",
        "Apenas cad√∫nico",
    ]

    for achado in variantes:
        resultado, tem_filho = simular_reclassificacao_cadunico(achado, ["1"])
        assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
            f"‚ùå Variante '{achado}' n√£o foi reclassificada corretamente: '{resultado}'"

    print("‚úÖ PASSOU: Regra funciona independentemente de mai√∫sculas/min√∫sculas")
    return True


def teste_falso_positivo_arg2_sem_mencao_filho():
    """
    üö® TESTE CR√çTICO: Valida corre√ß√£o do falso positivo
    Quando GPT marca Arg 2 indevidamente mas texto N√ÉO menciona filho
    """
    achado = "Apenas Cad√önico"
    argumentos = ["2", "1"]  # Arg 2 marcado pelo GPT (pode ser erro)
    texto_defesa = "Nunca tive uni√£o est√°vel. Erro no cadastro."  # SEM men√ß√£o a filho

    resultado, tem_filho = simular_reclassificacao_cadunico(achado, argumentos, texto_defesa)

    # Deve reclassificar para Cad√önico + Endere√ßo, mas flag filho=False
    assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
        f"‚ùå FALSO POSITIVO! Esperado 'Cad√önico + Endere√ßo', obtido '{resultado}'"
    assert tem_filho == False, \
        f"‚ùå Flag tem_filho deveria ser False (sem men√ß√£o textual), obtido {tem_filho}"

    print("‚úÖ PASSOU: Arg 2 SEM men√ß√£o textual a filho ‚Üí Cad√önico + Endere√ßo, flag filho=False")
    return True


def teste_verdadeiro_positivo_arg2_com_mencao_filho():
    """
    Valida que Arg 2 + men√ß√£o textual a filho ‚Üí Cad√önico + Endere√ßo + flag filho=True
    """
    achado = "Apenas Cad√önico"
    argumentos = ["2"]
    texto_defesa = "Meu filho n√£o mora comigo"

    resultado, tem_filho = simular_reclassificacao_cadunico(achado, argumentos, texto_defesa)

    assert resultado == "Cad√önico + Endere√ßo em m√∫ltiplas bases", \
        f"‚ùå Esperado 'Cad√önico + Endere√ßo em m√∫ltiplas bases', obtido '{resultado}'"
    assert tem_filho == True, \
        f"‚ùå Flag tem_filho deveria ser True, obtido {tem_filho}"

    print("‚úÖ PASSOU: Arg 2 COM men√ß√£o textual a filho ‚Üí Cad√önico + Endere√ßo, flag filho=True")
    return True


def teste_justificativa_empirica():
    """
    Testa se a regra est√° alinhada com a base emp√≠rica DECIPEX
    """
    print("\nüìä JUSTIFICATIVA EMP√çRICA E JUR√çDICA (v2.2.0):")
    print("‚îÅ" * 80)
    print("Base jur√≠dica:")
    print("  ‚Ä¢ Cad√önico exige endere√ßo comum para declara√ß√£o de companheiro(a)")
    print("  ‚Ä¢ Logo, 'Apenas Cad√önico' implica coabita√ß√£o declarada pela interessada")
    print("")
    print("Reclassifica√ß√£o aplicada:")
    print("  1. Apenas Cad√önico ‚Üí SEMPRE reclassifica para 'Cad√önico + Endere√ßo'")
    print("  2. Flag tem_filho_defesa armazenada quando defesa menciona filho")
    print("")
    print("üîπ Inova√ß√£o v2.2.0:")
    print("  ‚Ä¢ Achado unificado: 'Cad√önico + Endere√ßo em m√∫ltiplas bases'")
    print("  ‚Ä¢ Men√ß√£o a filho n√£o altera achado, apenas flag para mensagem de decis√£o")
    print("  ‚Ä¢ Mensagem de decis√£o mostra: 'improcedente por: [Args] + Cad√önico + Endere√ßo'")
    print("  ‚Ä¢ Se flag filho=True, adiciona: '+ Filho em comum'")
    print("")
    print("üîí Prote√ß√£o contra falsos positivos:")
    print("  ‚Ä¢ Valida men√ß√£o LITERAL a 'filho/filha/filhos/filhas' no texto")
    print("  ‚Ä¢ Flag s√≥ ativada se men√ß√£o textual expl√≠cita (ignora Args 2/12 sem confirma√ß√£o textual)")
    print("")
    print("Risco jur√≠dico: ZERO")
    print("  ‚Ä¢ N√£o cria prova nova, apenas explicita fato j√° presente no Cad√önico")
    print("  ‚Ä¢ Aumenta transpar√™ncia da motiva√ß√£o da decis√£o")
    print("  ‚Ä¢ Alinhado ao princ√≠pio da verdade material (Lei 9.784/1999, art. 2¬∫)")
    print("‚îÅ" * 80)
    return True


def executar_todos_testes():
    """Executa todos os testes e reporta resultados"""
    print("=" * 80)
    print("TESTES DE RECLASSIFICA√á√ÉO: Cad√önico ‚Üí Endere√ßo")
    print("=" * 80)
    print("")

    testes = [
        teste_cadunico_sem_filho,
        teste_cadunico_com_filho_arg2,
        teste_cadunico_com_filho_arg12,
        teste_cadunico_com_ambos_args_filho,
        teste_falso_positivo_arg2_sem_mencao_filho,  # üö® TESTE CR√çTICO
        teste_verdadeiro_positivo_arg2_com_mencao_filho,
        teste_nao_reclassifica_outros_achados,
        teste_case_insensitive,
        teste_justificativa_empirica,
    ]

    passou = 0
    falhou = 0

    for teste in testes:
        try:
            if teste():
                passou += 1
        except AssertionError as e:
            print(f"‚ùå FALHOU: {teste.__name__}")
            print(f"   Motivo: {e}")
            falhou += 1
        except Exception as e:
            print(f"‚ùå ERRO: {teste.__name__}")
            print(f"   Erro: {e}")
            falhou += 1

    print("")
    print("=" * 80)
    print(f"TOTAL: {passou}/{len(testes)} testes passaram")

    if falhou == 0:
        print("‚úÖ TODOS OS TESTES PASSARAM! A regra de reclassifica√ß√£o est√° funcionando corretamente.")
    else:
        print(f"‚ùå {falhou} teste(s) falharam. Verifique a implementa√ß√£o.")

    print("=" * 80)

    return falhou == 0


if __name__ == "__main__":
    sucesso = executar_todos_testes()
    sys.exit(0 if sucesso else 1)
